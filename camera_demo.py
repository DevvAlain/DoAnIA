#!/usr/bin/env python3
"""
Camera MQTT Demo Script
Demo camera simulator v·ªõi MQTT broker s·∫µn c√≥
"""

import subprocess
import time
import logging
import sys
import os
import signal
from threading import Thread

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CameraDemo:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def check_mqtt_broker(self):
        """Check if MQTT broker is running"""
        try:
            # Try to connect to MQTT broker
            import paho.mqtt.client as mqtt
            
            def on_connect(client, userdata, flags, rc, properties=None):
                if rc == 0:
                    logger.info("‚úÖ MQTT broker is running")
                    client.disconnect()
                else:
                    logger.error(f"‚ùå Cannot connect to MQTT broker, return code {rc}")
                    
            client = mqtt.Client(callback_api_version=mqtt.CallbackAPIVersion.VERSION2)
            client.on_connect = on_connect
            client.connect("localhost", 1883, 10)
            client.loop_start()
            time.sleep(2)
            client.loop_stop()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå MQTT broker not available: {e}")
            return False
    
    def start_docker_broker(self):
        """Start MQTT broker using docker-compose"""
        logger.info("üê≥ Starting MQTT broker with docker-compose...")
        try:
            # Check if docker-compose.yml exists
            if os.path.exists("docker-compose.yml"):
                cmd = ["docker-compose", "up", "-d", "emqx"]
                process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                stdout, stderr = process.communicate()
                
                if process.returncode == 0:
                    logger.info("‚úÖ MQTT broker started successfully")
                    time.sleep(10)  # Wait for broker to be ready
                    return True
                else:
                    logger.error(f"‚ùå Failed to start MQTT broker: {stderr.decode()}")
                    return False
            else:
                logger.error("‚ùå docker-compose.yml not found")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error starting MQTT broker: {e}")
            return False
    
    def run_camera_simulator(self, cameras=3, duration=60):
        """Run camera simulator"""
        logger.info(f"üé¨ Starting camera simulator with {cameras} cameras for {duration} seconds...")
        
        try:
            cmd = [
                sys.executable, "camera_mqtt_simulator.py",
                "--cameras", str(cameras),
                "--duration", str(duration),
                "--broker", "localhost",
                "--port", "1883"
            ]
            
            process = subprocess.Popen(cmd)
            self.processes.append(process)
            
            return process
            
        except Exception as e:
            logger.error(f"‚ùå Error starting camera simulator: {e}")
            return None
    
    def run_subscriber(self):
        """Run camera MQTT subscriber"""
        logger.info("üëÇ Starting camera MQTT subscriber...")
        
        try:
            cmd = [
                sys.executable, "camera_mqtt_subscriber.py",
                "--broker", "localhost",
                "--port", "1883"
            ]
            
            process = subprocess.Popen(cmd)
            self.processes.append(process)
            
            return process
            
        except Exception as e:
            logger.error(f"‚ùå Error starting subscriber: {e}")
            return None
    
    def run_test_simulator(self):
        """Run simple test camera simulator"""
        logger.info("üß™ Running test camera simulator...")
        
        try:
            cmd = [sys.executable, "test_camera_simulator.py"]
            process = subprocess.Popen(cmd)
            process.wait()  # Wait for test to complete
            
            if process.returncode == 0:
                logger.info("‚úÖ Test camera simulator completed successfully")
            else:
                logger.error("‚ùå Test camera simulator failed")
                
        except Exception as e:
            logger.error(f"‚ùå Error running test simulator: {e}")
    
    def cleanup(self):
        """Cleanup processes"""
        logger.info("üßπ Cleaning up processes...")
        
        for process in self.processes:
            try:
                if process.poll() is None:  # Still running
                    process.terminate()
                    process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
            except Exception as e:
                logger.error(f"Error terminating process: {e}")
        
        self.processes.clear()
    
    def signal_handler(self, signum, frame):
        """Handle Ctrl+C"""
        logger.info("üõë Received interrupt signal...")
        self.running = False
        self.cleanup()
        sys.exit(0)
    
    def run_full_demo(self, cameras=3, duration=120):
        """Run full camera demo"""
        # Setup signal handler
        signal.signal(signal.SIGINT, self.signal_handler)
        
        logger.info("üé¨ Starting Camera MQTT Demo")
        logger.info("=" * 50)
        
        # 1. Check if MQTT broker is running
        if not self.check_mqtt_broker():
            logger.info("üîÑ MQTT broker not running, attempting to start...")
            if not self.start_docker_broker():
                logger.error("‚ùå Cannot start MQTT broker. Please start manually:")
                logger.error("   docker-compose up -d emqx")
                return False
        
        # 2. Run test simulator first
        logger.info("\nüìã Step 1: Running test camera simulator...")
        self.run_test_simulator()
        
        input("\nüìã Step 2: Press Enter to start full camera simulation...")
        
        # 3. Start subscriber in background
        subscriber_process = self.run_subscriber()
        if not subscriber_process:
            return False
        
        time.sleep(2)  # Let subscriber start
        
        # 4. Start camera simulator
        simulator_process = self.run_camera_simulator(cameras, duration)
        if not simulator_process:
            return False
        
        logger.info(f"üéØ Demo running for {duration} seconds...")
        logger.info("üìä Monitor the messages above")
        logger.info("üõë Press Ctrl+C to stop early")
        
        try:
            # Wait for simulator to complete
            simulator_process.wait()
            logger.info("‚úÖ Camera simulator completed")
            
            # Let subscriber run a bit more to catch final messages
            time.sleep(5)
            
        except KeyboardInterrupt:
            logger.info("üõë Demo stopped by user")
        finally:
            self.cleanup()
        
        logger.info("üèÅ Camera MQTT Demo completed!")
        return True
    
    def run_quick_test(self):
        """Run quick test without full demo"""
        logger.info("üß™ Running quick camera test...")
        
        if not self.check_mqtt_broker():
            logger.error("‚ùå MQTT broker not available for quick test")
            logger.error("üí° Try: docker-compose up -d emqx")
            return False
        
        self.run_test_simulator()
        return True

def main():
    demo = CameraDemo()
    
    print("üé¨ Camera MQTT Simulator Demo")
    print("=" * 40)
    print("1. Quick Test (test_camera_simulator.py)")
    print("2. Full Demo (simulator + subscriber)")
    print("3. Exit")
    
    while True:
        try:
            choice = input("\nSelect option (1-3): ").strip()
            
            if choice == "1":
                demo.run_quick_test()
                break
            elif choice == "2":
                cameras = input("Number of cameras (default 3): ").strip()
                cameras = int(cameras) if cameras.isdigit() else 3
                
                duration = input("Duration in seconds (default 120): ").strip()
                duration = int(duration) if duration.isdigit() else 120
                
                demo.run_full_demo(cameras, duration)
                break
            elif choice == "3":
                print("üëã Goodbye!")
                break
            else:
                print("‚ùå Invalid choice. Please select 1, 2, or 3.")
                
        except KeyboardInterrupt:
            print("\nüõë Demo cancelled by user")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()